# ThoughtWorks职业发展的自我规划指导意见

## 简介

和一个1500人的公司相比，tw的职业发展其实更像创业公司。一般大中型公司会有不同的角色，职业路线，培训和工会什么的，但怎么讲呢，tw基本上一个都没有。这使得我们中的很多人感觉有点迷茫，不知道怎么到达他们想要的目标。

文归正题，其实tw还没有很好的定义职业发展这个事情，但这里有些秘籍和一些例子你可以遵循，并从其中找到符合自己成长和职业发展的一条路。也许，你有可能沿着这条路改变你自己（甚至拯救世界？）。

### 历史

之所以ThoughtWorks的职业发展感觉更像创业公司，这是因为我们本来就是！在三次元中，真的不是很久以前。（但在二次元里，时间记法是不同的，所以我们总感觉公司创建是上古时期的事情）。其实在这些年里，我们也做过几次失败的努力，想要整理出一个职业发展，但即使有几次我们弄了个计划出来，总有些别的什么事情感觉更重要（所以我们就不管职业发展这码事儿了）。这些初具模型的努力不是缺少资金就是短缺人手，大部分都夭折了。

但仍然有人从这个坑爹的游戏里用他们自己的方法通关了，有了他们，我们终于积攒了些“前车之鉴”了。这里就是想帮你找到这些前人踩出的路。

### 果壳里的秘密

我还是开门见山地说吧，在tw寻求职业发展的最大秘密只有两个：

1. 确定你想要什么。
2. 官人，我要。

我知道这看起来并不令人满意，但还是花一分钟来仔细想想这个事情吧。tw其实并没有把你限定在某个设定好的企业职业发展路线上。比如说开始只能做个程序员，感觉差不多了就转个BA，做的顺心了就来当个项目经理，然后要么进管理层要么就滚蛋了；你不一定非要这么走的。虽然在很多大公司就是这样的，但这又刚好证明了彼得原理（Peter Principle）。彼得原理如是说：“人们趋向于一直得到提拔直到一个他们胜任不了的工作，然后他们的职业生涯就停滞了”。

在ThoughtWorks，如果你喜欢测试，我是说如果你执着于翻箱倒柜地把程序的每个角落都测个遍并且愿意测到世界的尽头，这都没关系，尽管测。如果没有比挖掘客户业务，找到客户自己都没发现的规律更让你舒心的事儿，你也可以一直这样做下去。如果你想360°了解软件交付，你也可以换个角色，这都不是事儿！

这样的自由足够你去追寻梦想了吧？够自由去选择最符合自己的IT了吧？够自由去自定义一个职业发展路线了吧？（但这里我不得不承认，并不是每个人的答案都是yes。一些人就想要别人帮他把路铺好，然后他们只需要在固定的角色上精进技术就可以了。如果被我说中了，那么可能在tw你并不会太好过，但我希望本文能给你足够的介绍，让你感觉舒服一些。）

官人，我拿什么要？？

Okay，我得说这个确实太没指导性了，为了确保你有个成功的职业生涯，我还是多说几条：

1. 在这里你得自我驱动
世界上只有你自己最关心你的职业。（可能你妈也很关心，还有你贷款的银行。）如果你自己都不采取点措施，就不要指望别人啦。（他们自顾不暇。）你得自己制定计划，并且自己保证进度。

2. 这里是个熟人推荐系统
想要得到新的挑战、经验和责任的最好办法并不一定要成功。认识到这点是非常重要的！但同样重要的是，你要别人知道你很牛逼（即使这次你挂了）。因为在一家咨询公司里，组织结构其实是很离散的，并且我们有一套上古的HR系统，所以，很多时候，别人根本不知道你能干什么，也不知道你在某个领域很牛逼。你必须要做点什么让别人看到你的闪光点。

3. 在这里经验很重要（除了它不重要的时候）
经验可是一个奇妙的工具，它是建立知识库最可靠的方法，也是帮你成功交付软件的最佳帮手。最让客户放心的事情就是这里有个咨询师曾经在某个地方做过类似的事情。
也就是说，还是有空间留给创新和天才的。如果你真的什么地方很厉害，明显比其他人高出一截，这也可以的。但是需要注意的是，tw有很多奇才。这也算职业进阶的一种方法，只是不在我的计划中。还是要在工作上追求卓越，如果你真的是金子，总有人会来找你哒。

4. 为你自己代言
没有人知道你面对的什么样的挑战，学会的什么样的技能。如果擅长什么，站出来做点贡献。在邮件列表里发一发。当你觉得你自己准备好迎接下一等级挑战时，告诉你的sponsor，告诉你的项目经理。确保销售团队知道你精通的领域。告诉Resource Manager你想做什么。你要知道，公司需要权衡很多事情，比如说你的和大家的职业发展，项目资源，销售还有业务的需求。这也告诉我们，在tw你不需要太谦虚！告诉别人你行，他们就去给你找上的机会了。

### 服用方法

这里我们要分成三个部分，职业目标，ThoughtWorks有的角色和职业楷模。我们首先来看职业目标，先确定好你想要走哪个方向，每个方向需要学习什么技能。然后来看一下在ThoughtWorks里都有哪些角色，哪个角色可以培养你的这些技能。最后通过一些Role Model来汲取些额外的经验和启发。（还有一个总结用来说明我们用的一些术语。）最最最后，还会给出一些真实案例，来看看他们是怎么成功走出一条成功的职业路线的，虽然有些人已经是前ThoughtWorker了。

第一个提示：找到你的职业偶像。在tw里，总有个人让你羡慕吧，跟他们聊聊？！请他们喝个咖啡，换点意见吧。你是怎么做到这个高度的？你得到了什么特殊的机会么？如果我想要一个类似的职业生涯，我应该学些什么做些什么？
并不是所有人都有职业目标的。我们中的有些人基本就是随波逐流的，看命运能把他推到哪儿。如果这就是你，那你到这里就不用读啦——你根本不需要职业发展的！剩下的一些是渴望在职业生涯中得到些什么，但又不是很确定那到底是什么，这个就是为你而写的。我们会先讲一些IT行业中不同的职业和这些职业都做什么。（也就是说，有些人并不知道最终想要得到些什么，但我们还有一些中期目标。那也很好，你可以在后面的tw roles里找到你想要的。）并不是所有的这些职业在tw你都能得到——其实也无所谓吧。如果你能在tw得到锻炼，出去当我们客户的CIO，那真是太好了。
如果你已经大概知道你想要什么，并且知道应该怎么做，那你基本可以跳过下一章了。
## 职业目标

### Program Manager

Program Manager很像一个超人版的项目经理。仅仅保证一个项目成功是不够的，你得保证一连串环环相扣的项目都在有限的时间有限的预算里完成！这个角色会参与很多预算啊，人力资源之类的东西，基本写不成代码了。

---

所需技能： Business, Communication, Experience, Facilitation, Influencing, Interpersonal Skills, Leadership, Project Management Technical Knowledge

### Product Manager

产品经理就是做产品啦（废话）。你不仅仅要确保应用的完成、走向市场，你还需要知道接下来这个产品要干什么！你会考虑很多最终用户的反馈，市场调查，并且要保持产品的一致性和用户体验。

--

所需技能：Business, Experience, Leadership

### Architect

需要IT公司需要人们有一定的技术领导才能。他们需要人有确定标准并让其他人follow的能力、可以保证IT软件的正常运转、可以鼓励开发团队开发出不仅仅是伟大的软件，并且是牛逼的可以维护的软件。

--

所需技能：Experience, Expertise, Leadership, Technical Knowledge

### Chief Technology Officer

对于一家技术公司来说，CTO就是这个公司的架构师。和架构师很像，他们有技术上的领导才能，但同时也提供技术上的展望。他们可能需要来个五年规划，十年规划什么的，并决定这家公司在未来技术领域的位置。他们帮助公司政策和实践都符合一定的标准，从而确保公司的核心业务正常运营。

--

所需技能：Communication, Experience, Influencing, Leadership, Technical Knowledge

### Chief Information Officer

CIO负责的是IT的业务那一边。他们为开发工作设置预算、制定计划，决定员工级别，帮助定义IT的业务场景，并且在普遍意义上保证IT部门的正常运转。这个职位其实主要关注的是业务，基本没有CIO还有时间写写代码了。

--

所需技能：Business, Communication, Experience, Leadership

### Sales

销售可是个有趣的工作。来ThoughtWorks的咨询师里，没有多少是把销售当成职业目标的。但这不影响销售是一个有趣并有挑战的职业路线。你不仅仅需要了解IT部门是如何工作的（从硬件到软件，从前端到后端），你还需要知道客户想要的是什么。然后你还需要和你的客户建立良好的关系，弄清楚你的产品是否适合他们。最后，如果你的产品很合适，你还需要说服他们去买！高效的销售人员需要和客户建立私人关系，还需要了解潜在客户的业务需求。这有很多的机会去帮助公司做正确的事情。

--

所需技能：Business, Experience, Influencing, Interpersonal Skills, Technical Knowledge

### Guru / 大师

大师就是无所不知的那个人啦，而且每个人都知道那家伙什么都知道。大师就是那个致力于解决未解之谜、复杂问题的人。也是那些在各种会议上定期发言的人。他们写的书是每个人书架上的压箱宝。如果你想要在你选定的领域成为家喻户晓的人，那么Guru就是你的目标。但是需要注意的是，做大师，难，做出名的大师，更难，这需要不计其数的工作。你要忍受有无数的门外汉问你一些他们在网上一搜就能找到答案的问题，你还得去讨好那些觉得自己做到网站牛逼的可以上财富500的那些人。你还需要有你自己的圈子，并跟无数的人讲话。你很有可能再也不想看到你最熟悉的这些东西！Guru是一个可以让你影响到软件交付的一个目标，但完成目标却很不容易，而且这个目标并不适合所有人。已有的例子是：Kathy Sierra, Josh Bloch, and Martin Fowler。

--

所需技能：Communication, Experience, Expertise, Technical Knowledge

### Independent Guru

大部分大师都在知名的企业里工作，帮助这些公司定制政策，带领研发团队，或是给人们带来灵感之类的。只有一小部分大师会从事独立咨询师的工作。想走这条路，首先你得成为一名大师——你得有点料子，让公司愿意承担高额费用邀请你加入。而且，除了你所专长的领域之外，你还需要了解销售、影响和引导别人这方面的技能。你只能单枪匹马的说服你的客户改变他们的商业模式。这方面的例子有Esther Derby、Jeff Patton和Bret Pettichord。

--

所需技能：Coaching, Communication, Experience, Expertise, Facilitation, Influencing, Interpersonal Skills, Technical Knowledge

### Entrepreneur

ThoughtWorks的价值之一就是企业家精神（Entrepreneurialism，来再拼一遍，还是我们简写成e16m?）。这不仅仅是个不好记也不好读的单词——它还是很多TWer所推崇的价值！很多TWer离职去建立他们的互联网或是产品公司。他们中的一些成功了——大部分挂了。无论如何，从零开始创业目睹它的整个成长过程都是一个十分值得的职业路线，就算你的第一个公司失败了依然也是一样。

### Business

Business领域还有一些其他的角色，比如Marketing，Sales，CEO等等。一个IT的职业规划可以让你拥有专长和领域知识来驾驭这些角色，但本文主要是关注IT职业的，所以这里就省略500字。

### 没找到你的目标？

是不是这份列表里没有你想要的？那就算了……

接下来我们将告诉你哪些TW角色可以帮助你完成你的职业目标。如果你已经被这些术语弄昏了，那就查阅下目录。

## TW角色

以上是你最终想要到达的目标。TW提供了非常非常多的帮助来让你到达那里，而且大部分的帮助可以在TW现有的职位中找到。事实上，认识到每个角色都可以学到非常多的东西、有非常大的成长空间是很重要的一件事。就如同Malcom Gladwell在[《异类》](http://book.douban.com/subject/3688489/)一书中所说，想要成为某一领域的专家需要10000个小时。10，000（ten thousand，这样读起来比较有气势）！这意味着如果你想要成为某个TW角色的专家，至少需要五年——这还要你每天都对它精益求精。

Notes：
你可能在某个项目上不止扮演一个角色。
一些角色（比如Dev、BA和QA）是没什么所需技能的。这是因为所有的角色都有一个最低门槛，只要你入职了，至少就证明你已经跨过这道门槛。
你可以在Jigsaw上查到特定职位的人：[http://jigsaw.thoughtworks.com](http://jigsaw.thoughtworks.com)
### Developer

同等条件下，比起其他角色，Thoughtworks需要更多的Dev。Dev负责把客户（_异想天开_）的想法实现成可工作的代码。他们是百事通——啥都得懂，他们在项目上的角色可能是很多种：从把业务流程转换成一系列的领域对象，到精进客户的部署流程都可能干。Dev就是交付工作背后的引擎。

--

Provides: Experience, Expertise, Technical Knowledge

### Tech Lead/Dev Lead

其实做Tech Lead，并不一定是组上技术最牛的人。Tech Lead帮忙做技术决定，并确保它被执行。他们提防Dev可能犯的错误，并保证Dev和可能帮忙的人有一定的联系。还有就是他们要开一些别人不用参加的会……

--

Requires: Communiation, Experience, Interpersonal Skills, Technical Knowledge
Provides: Coaching, Experience, Expertise, Leadership, Recognition

### UI/UX/CX

现在我们开发的大部分App都有一个前端页面，随之而来的是我们的客户希望这个前端是好用并且好看的。这个角色通常横跨了Dev和BA两种角色，他们通常和客户合作的更紧密些，而不是Dev。无论如何你都得花很多时间和CSS/JS/HTML奋战。这个角色仍然是TW面临的一个挑战：传统的UX如何适应敏捷开发流程呢？

传统UX都干啥：focus groups、usability testing、和information design

--

Requires: Business, Technical Knowledge
Provides: Experience, Expertise, Technical Knowledge,



